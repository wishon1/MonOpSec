#!/usr/bin/env python3
"""
Routes for the Flask app

This module provides a SystemOverview class to capture and parse 
system metrics from a C program using ctypes.
"""

from . import ctypes, logging, os, time


class SystemOverview:
    """
    A class to retrieve and parse system metrics from a C shared library.
    
    This class uses ctypes to directly call functions from a C shared library
    to collect system metrics and provides methods to parse those metrics.
    """
    
    def __init__(self, library_path=None):
        """
        Initialize SystemOverview with a path to the shared library.
        
        Args:
            library_path (str): Path to the C shared library file.
        """
        try:
            # Set default path to shared library if not provided
            if library_path is None:
                library_path = os.path.join(os.path.dirname(__file__), "libsystemmetrics.so")
                
            # Check if the library exists at the specified path
            if not os.path.exists(library_path):
                raise FileNotFoundError(f"Library not found at {library_path}")

            # Load the shared library
            self.lib = ctypes.CDLL(library_path)
            logging.debug(f"Successfully loaded library from {library_path}")
            
            # Define a structure for all metrics to minimize calls
            class Metrics(ctypes.Structure):
                _fields_ = [
                    ('cpu_usage', ctypes.c_float),
                    ('total_mem_gb', ctypes.c_float),
                    ('used_mem_gb', ctypes.c_float),
                    ('total_disk', ctypes.c_float),
                    ('used_disk', ctypes.c_float),
                    ('free_disk', ctypes.c_float),
                    ('download_kbps', ctypes.c_float),
                    ('upload_kbps', ctypes.c_float),
                ]
            
             # Define return type as a pointer to Metrics structure
            self.lib.get_all_metrics.restype = ctypes.POINTER(Metrics)

            # set free function return type as None
            self.lib.free.restype = None 

            self._metrics_type = Metrics
            self.cache = None
            self.last_cache_time = 0

            # Cache refresh interval in seconds
            self.refresh_interval = 5

        except Exception as e:
            logging.error(f"Error loading shared library: {e}")
            self.lib = None

    def _fetch_metrics(self):
        """
        Fetch metrics from the C library, storing them in a Python dictionary.
        
        Returns:
            dict: Parsed system metrics or None if an error occurs.
        """
        if not self.lib:
            logging.error("Shared library is not loaded.")
            return None

        try:
            # Retrieve metrics structure from the library
            metrics_ptr = self.lib.get_all_metrics()
            
            if not metrics_ptr:
                logging.error("Failed to retrieve metrics pointer.")
                return None

            metrics = metrics_ptr.contents
            
            # Build a dictionary from the metrics structure
            metrics_dict = {
                "cpu": {"usage": metrics.cpu_usage},
                "memory": {
                    "total_memory": metrics.total_mem_gb,
                    "used_memory": metrics.used_mem_gb,
                },
                "disk": {
                    "total_space": metrics.total_disk,
                    "used_space": metrics.used_disk,
                    "free_space": metrics.free_disk,
                },
                "network": {
                    "download_kbps": metrics.download_kbps,
                    "upload_kbps": metrics.upload_kbps,
                },
            }
            
            # Free the allocated memory for the metrics structure
            self.lib.free(metrics_ptr)
            return metrics_dict

        except Exception as e:
            logging.error(f"Error retrieving metrics: {e}")
            return None

    def get_metrics(self):
        """
        Provides system metrics, using cached data if within the refresh interval.
        
        Returns:
            dict: System metrics from cache or updated from the library.
        """
        current_time = time.time()
        
        # Check cache validity
        if not self.cache or (current_time - self.last_cache_time > self.refresh_interval):
            self.cache = self._fetch_metrics()
            self.last_cache_time = current_time

        return self.cache
